// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/18/2016 11:14:27"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    controlunit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module controlunit_vlg_sample_tst(
	Clock,
	funct,
	Res,
	w,
	sampler_tx
);
input  Clock;
input [15:0] funct;
input  Res;
input  w;
output sampler_tx;

reg sample;
time current_time;
always @(Clock or funct or Res or w)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module controlunit_vlg_check_tst (
	Ain,
	Data,
	Done,
	Gin,
	Gout,
	R0_in,
	R0_out,
	R1_in,
	R1_out,
	R2_in,
	R2_out,
	R3_in,
	R3_out,
	sampler_rx
);
input  Ain;
input  Data;
input  Done;
input  Gin;
input  Gout;
input  R0_in;
input  R0_out;
input  R1_in;
input  R1_out;
input  R2_in;
input  R2_out;
input  R3_in;
input  R3_out;
input sampler_rx;

reg  Ain_expected;
reg  Data_expected;
reg  Done_expected;
reg  Gin_expected;
reg  Gout_expected;
reg  R0_in_expected;
reg  R0_out_expected;
reg  R1_in_expected;
reg  R1_out_expected;
reg  R2_in_expected;
reg  R2_out_expected;
reg  R3_in_expected;
reg  R3_out_expected;

reg  Ain_prev;
reg  Data_prev;
reg  Done_prev;
reg  Gin_prev;
reg  Gout_prev;
reg  R0_in_prev;
reg  R0_out_prev;
reg  R1_in_prev;
reg  R1_out_prev;
reg  R2_in_prev;
reg  R2_out_prev;
reg  R3_in_prev;
reg  R3_out_prev;

reg  Ain_expected_prev;
reg  Data_expected_prev;
reg  Gin_expected_prev;
reg  Gout_expected_prev;
reg  R0_in_expected_prev;
reg  R0_out_expected_prev;
reg  R1_in_expected_prev;
reg  R1_out_expected_prev;
reg  R2_in_expected_prev;
reg  R2_out_expected_prev;
reg  R3_in_expected_prev;
reg  R3_out_expected_prev;

reg  last_Ain_exp;
reg  last_Data_exp;
reg  last_Gin_exp;
reg  last_Gout_exp;
reg  last_R0_in_exp;
reg  last_R0_out_exp;
reg  last_R1_in_exp;
reg  last_R1_out_exp;
reg  last_R2_in_exp;
reg  last_R2_out_exp;
reg  last_R3_in_exp;
reg  last_R3_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:13] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 13'b1;
end

// update real /o prevs

always @(trigger)
begin
	Ain_prev = Ain;
	Data_prev = Data;
	Done_prev = Done;
	Gin_prev = Gin;
	Gout_prev = Gout;
	R0_in_prev = R0_in;
	R0_out_prev = R0_out;
	R1_in_prev = R1_in;
	R1_out_prev = R1_out;
	R2_in_prev = R2_in;
	R2_out_prev = R2_out;
	R3_in_prev = R3_in;
	R3_out_prev = R3_out;
end

// update expected /o prevs

always @(trigger)
begin
	Ain_expected_prev = Ain_expected;
	Data_expected_prev = Data_expected;
	Gin_expected_prev = Gin_expected;
	Gout_expected_prev = Gout_expected;
	R0_in_expected_prev = R0_in_expected;
	R0_out_expected_prev = R0_out_expected;
	R1_in_expected_prev = R1_in_expected;
	R1_out_expected_prev = R1_out_expected;
	R2_in_expected_prev = R2_in_expected;
	R2_out_expected_prev = R2_out_expected;
	R3_in_expected_prev = R3_in_expected;
	R3_out_expected_prev = R3_out_expected;
end



// expected Ain
initial
begin
	Ain_expected = 1'bX;
end 

// expected Data
initial
begin
	Data_expected = 1'bX;
end 

// expected Gin
initial
begin
	Gin_expected = 1'bX;
end 

// expected Gout
initial
begin
	Gout_expected = 1'bX;
end 

// expected R0_in
initial
begin
	R0_in_expected = 1'bX;
end 

// expected R0_out
initial
begin
	R0_out_expected = 1'bX;
end 

// expected R1_in
initial
begin
	R1_in_expected = 1'bX;
end 

// expected R1_out
initial
begin
	R1_out_expected = 1'bX;
end 

// expected R2_in
initial
begin
	R2_in_expected = 1'bX;
end 

// expected R2_out
initial
begin
	R2_out_expected = 1'bX;
end 

// expected R3_in
initial
begin
	R3_in_expected = 1'bX;
end 

// expected R3_out
initial
begin
	R3_out_expected = 1'bX;
end 
// generate trigger
always @(Ain_expected or Ain or Data_expected or Data or Done_expected or Done or Gin_expected or Gin or Gout_expected or Gout or R0_in_expected or R0_in or R0_out_expected or R0_out or R1_in_expected or R1_in or R1_out_expected or R1_out or R2_in_expected or R2_in or R2_out_expected or R2_out or R3_in_expected or R3_in or R3_out_expected or R3_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Ain = %b | expected Data = %b | expected Done = %b | expected Gin = %b | expected Gout = %b | expected R0_in = %b | expected R0_out = %b | expected R1_in = %b | expected R1_out = %b | expected R2_in = %b | expected R2_out = %b | expected R3_in = %b | expected R3_out = %b | ",Ain_expected_prev,Data_expected_prev,Done_expected_prev,Gin_expected_prev,Gout_expected_prev,R0_in_expected_prev,R0_out_expected_prev,R1_in_expected_prev,R1_out_expected_prev,R2_in_expected_prev,R2_out_expected_prev,R3_in_expected_prev,R3_out_expected_prev);
	$display("| real Ain = %b | real Data = %b | real Done = %b | real Gin = %b | real Gout = %b | real R0_in = %b | real R0_out = %b | real R1_in = %b | real R1_out = %b | real R2_in = %b | real R2_out = %b | real R3_in = %b | real R3_out = %b | ",Ain_prev,Data_prev,Done_prev,Gin_prev,Gout_prev,R0_in_prev,R0_out_prev,R1_in_prev,R1_out_prev,R2_in_prev,R2_out_prev,R3_in_prev,R3_out_prev);
`endif
	if (
		( Ain_expected_prev !== 1'bx ) && ( Ain_prev !== Ain_expected_prev )
		&& ((Ain_expected_prev !== last_Ain_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ain :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ain_expected_prev);
		$display ("     Real value = %b", Ain_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Ain_exp = Ain_expected_prev;
	end
	if (
		( Data_expected_prev !== 1'bx ) && ( Data_prev !== Data_expected_prev )
		&& ((Data_expected_prev !== last_Data_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_expected_prev);
		$display ("     Real value = %b", Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_exp = Data_expected_prev;
	end
	if (
		( Gin_expected_prev !== 1'bx ) && ( Gin_prev !== Gin_expected_prev )
		&& ((Gin_expected_prev !== last_Gin_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Gin :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Gin_expected_prev);
		$display ("     Real value = %b", Gin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Gin_exp = Gin_expected_prev;
	end
	if (
		( Gout_expected_prev !== 1'bx ) && ( Gout_prev !== Gout_expected_prev )
		&& ((Gout_expected_prev !== last_Gout_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Gout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Gout_expected_prev);
		$display ("     Real value = %b", Gout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Gout_exp = Gout_expected_prev;
	end
	if (
		( R0_in_expected_prev !== 1'bx ) && ( R0_in_prev !== R0_in_expected_prev )
		&& ((R0_in_expected_prev !== last_R0_in_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_in :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_in_expected_prev);
		$display ("     Real value = %b", R0_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R0_in_exp = R0_in_expected_prev;
	end
	if (
		( R0_out_expected_prev !== 1'bx ) && ( R0_out_prev !== R0_out_expected_prev )
		&& ((R0_out_expected_prev !== last_R0_out_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_out_expected_prev);
		$display ("     Real value = %b", R0_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R0_out_exp = R0_out_expected_prev;
	end
	if (
		( R1_in_expected_prev !== 1'bx ) && ( R1_in_prev !== R1_in_expected_prev )
		&& ((R1_in_expected_prev !== last_R1_in_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_in :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_in_expected_prev);
		$display ("     Real value = %b", R1_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R1_in_exp = R1_in_expected_prev;
	end
	if (
		( R1_out_expected_prev !== 1'bx ) && ( R1_out_prev !== R1_out_expected_prev )
		&& ((R1_out_expected_prev !== last_R1_out_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_out_expected_prev);
		$display ("     Real value = %b", R1_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R1_out_exp = R1_out_expected_prev;
	end
	if (
		( R2_in_expected_prev !== 1'bx ) && ( R2_in_prev !== R2_in_expected_prev )
		&& ((R2_in_expected_prev !== last_R2_in_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2_in :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_in_expected_prev);
		$display ("     Real value = %b", R2_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R2_in_exp = R2_in_expected_prev;
	end
	if (
		( R2_out_expected_prev !== 1'bx ) && ( R2_out_prev !== R2_out_expected_prev )
		&& ((R2_out_expected_prev !== last_R2_out_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_out_expected_prev);
		$display ("     Real value = %b", R2_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R2_out_exp = R2_out_expected_prev;
	end
	if (
		( R3_in_expected_prev !== 1'bx ) && ( R3_in_prev !== R3_in_expected_prev )
		&& ((R3_in_expected_prev !== last_R3_in_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3_in :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_in_expected_prev);
		$display ("     Real value = %b", R3_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R3_in_exp = R3_in_expected_prev;
	end
	if (
		( R3_out_expected_prev !== 1'bx ) && ( R3_out_prev !== R3_out_expected_prev )
		&& ((R3_out_expected_prev !== last_R3_out_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_out_expected_prev);
		$display ("     Real value = %b", R3_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R3_out_exp = R3_out_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module controlunit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg [15:0] funct;
reg Res;
reg w;
// wires                                               
wire Ain;
wire Data;
wire Done;
wire Gin;
wire Gout;
wire R0_in;
wire R0_out;
wire R1_in;
wire R1_out;
wire R2_in;
wire R2_out;
wire R3_in;
wire R3_out;

wire sampler;                             

// assign statements (if any)                          
controlunit i1 (
// port map - connection between master ports and signals/registers   
	.Ain(Ain),
	.Clock(Clock),
	.Data(Data),
	.Done(Done),
	.funct(funct),
	.Gin(Gin),
	.Gout(Gout),
	.R0_in(R0_in),
	.R0_out(R0_out),
	.R1_in(R1_in),
	.R1_out(R1_out),
	.R2_in(R2_in),
	.R2_out(R2_out),
	.R3_in(R3_in),
	.R3_out(R3_out),
	.Res(Res),
	.w(w)
);

// Clock
always
begin
	Clock = 1'b0;
	Clock = #25000 1'b1;
	#25000;
end 
// funct[ 15 ]
initial
begin
	funct[15] = 1'b0;
end 
// funct[ 14 ]
initial
begin
	funct[14] = 1'b0;
end 
// funct[ 13 ]
initial
begin
	funct[13] = 1'b0;
end 
// funct[ 12 ]
initial
begin
	funct[12] = 1'b0;
end 
// funct[ 11 ]
initial
begin
	funct[11] = 1'b0;
end 
// funct[ 10 ]
initial
begin
	funct[10] = 1'b0;
end 
// funct[ 9 ]
initial
begin
	funct[9] = 1'b0;
end 
// funct[ 8 ]
initial
begin
	funct[8] = 1'b1;
end 
// funct[ 7 ]
initial
begin
	funct[7] = 1'b0;
end 
// funct[ 6 ]
initial
begin
	funct[6] = 1'b0;
end 
// funct[ 5 ]
initial
begin
	funct[5] = 1'b0;
end 
// funct[ 4 ]
initial
begin
	funct[4] = 1'b0;
end 
// funct[ 3 ]
initial
begin
	funct[3] = 1'b1;
end 
// funct[ 2 ]
initial
begin
	funct[2] = 1'b0;
end 
// funct[ 1 ]
initial
begin
	funct[1] = 1'b0;
end 
// funct[ 0 ]
initial
begin
	funct[0] = 1'b0;
end 

// Res
initial
begin
	Res = 1'b1;
	Res = #80000 1'b0;
end 

// w
initial
begin
	w = 1'b0;
	w = #80000 1'b1;
end 

controlunit_vlg_sample_tst tb_sample (
	.Clock(Clock),
	.funct(funct),
	.Res(Res),
	.w(w),
	.sampler_tx(sampler)
);

controlunit_vlg_check_tst tb_out(
	.Ain(Ain),
	.Data(Data),
	.Done(Done),
	.Gin(Gin),
	.Gout(Gout),
	.R0_in(R0_in),
	.R0_out(R0_out),
	.R1_in(R1_in),
	.R1_out(R1_out),
	.R2_in(R2_in),
	.R2_out(R2_out),
	.R3_in(R3_in),
	.R3_out(R3_out),
	.sampler_rx(sampler)
);
endmodule

