// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/30/2016 19:35:04"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    proc
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module proc_vlg_sample_tst(
	BusWires,
	KEY0,
	KEY1,
	KEY2,
	KEY3,
	SW,
	sampler_tx
);
input [15:0] BusWires;
input  KEY0;
input  KEY1;
input  KEY2;
input  KEY3;
input [17:0] SW;
output sampler_tx;

reg sample;
time current_time;
always @(BusWires or KEY0 or KEY1 or KEY2 or KEY3 or SW)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module proc_vlg_check_tst (
	BusWires,
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	HEX6,
	HEX7,
	LEDR,
	sampler_rx
);
input [15:0] BusWires;
input [6:0] HEX0;
input [6:0] HEX1;
input [6:0] HEX2;
input [6:0] HEX3;
input [6:0] HEX4;
input [6:0] HEX5;
input [6:0] HEX6;
input [6:0] HEX7;
input [15:0] LEDR;
input sampler_rx;

reg [15:0] BusWires_expected;
reg [6:0] HEX0_expected;
reg [6:0] HEX1_expected;
reg [6:0] HEX2_expected;
reg [6:0] HEX3_expected;
reg [6:0] HEX4_expected;
reg [6:0] HEX5_expected;
reg [6:0] HEX6_expected;
reg [6:0] HEX7_expected;
reg [15:0] LEDR_expected;

reg [15:0] BusWires_prev;
reg [6:0] HEX0_prev;
reg [6:0] HEX1_prev;
reg [6:0] HEX2_prev;
reg [6:0] HEX3_prev;
reg [6:0] HEX4_prev;
reg [6:0] HEX5_prev;
reg [6:0] HEX6_prev;
reg [6:0] HEX7_prev;
reg [15:0] LEDR_prev;

reg [15:0] BusWires_expected_prev;
reg [6:0] HEX0_expected_prev;
reg [6:0] HEX1_expected_prev;
reg [6:0] HEX2_expected_prev;
reg [6:0] HEX3_expected_prev;
reg [6:0] HEX4_expected_prev;
reg [6:0] HEX5_expected_prev;
reg [6:0] HEX6_expected_prev;
reg [6:0] HEX7_expected_prev;
reg [15:0] LEDR_expected_prev;

reg [15:0] last_BusWires_exp;
reg [6:0] last_HEX0_exp;
reg [6:0] last_HEX1_exp;
reg [6:0] last_HEX2_exp;
reg [6:0] last_HEX3_exp;
reg [6:0] last_HEX4_exp;
reg [6:0] last_HEX5_exp;
reg [6:0] last_HEX6_exp;
reg [6:0] last_HEX7_exp;
reg [15:0] last_LEDR_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	BusWires_prev = BusWires;
	HEX0_prev = HEX0;
	HEX1_prev = HEX1;
	HEX2_prev = HEX2;
	HEX3_prev = HEX3;
	HEX4_prev = HEX4;
	HEX5_prev = HEX5;
	HEX6_prev = HEX6;
	HEX7_prev = HEX7;
	LEDR_prev = LEDR;
end

// update expected /o prevs

always @(trigger)
begin
	BusWires_expected_prev = BusWires_expected;
	HEX0_expected_prev = HEX0_expected;
	HEX1_expected_prev = HEX1_expected;
	HEX2_expected_prev = HEX2_expected;
	HEX3_expected_prev = HEX3_expected;
	HEX4_expected_prev = HEX4_expected;
	HEX5_expected_prev = HEX5_expected;
	HEX6_expected_prev = HEX6_expected;
	HEX7_expected_prev = HEX7_expected;
	LEDR_expected_prev = LEDR_expected;
end


// expected HEX0[ 6 ]
initial
begin
	HEX0_expected[6] = 1'bX;
end 
// expected HEX0[ 5 ]
initial
begin
	HEX0_expected[5] = 1'bX;
end 
// expected HEX0[ 4 ]
initial
begin
	HEX0_expected[4] = 1'bX;
end 
// expected HEX0[ 3 ]
initial
begin
	HEX0_expected[3] = 1'bX;
end 
// expected HEX0[ 2 ]
initial
begin
	HEX0_expected[2] = 1'bX;
end 
// expected HEX0[ 1 ]
initial
begin
	HEX0_expected[1] = 1'bX;
end 
// expected HEX0[ 0 ]
initial
begin
	HEX0_expected[0] = 1'bX;
end 
// expected HEX1[ 6 ]
initial
begin
	HEX1_expected[6] = 1'bX;
end 
// expected HEX1[ 5 ]
initial
begin
	HEX1_expected[5] = 1'bX;
end 
// expected HEX1[ 4 ]
initial
begin
	HEX1_expected[4] = 1'bX;
end 
// expected HEX1[ 3 ]
initial
begin
	HEX1_expected[3] = 1'bX;
end 
// expected HEX1[ 2 ]
initial
begin
	HEX1_expected[2] = 1'bX;
end 
// expected HEX1[ 1 ]
initial
begin
	HEX1_expected[1] = 1'bX;
end 
// expected HEX1[ 0 ]
initial
begin
	HEX1_expected[0] = 1'bX;
end 
// expected HEX2[ 6 ]
initial
begin
	HEX2_expected[6] = 1'bX;
end 
// expected HEX2[ 5 ]
initial
begin
	HEX2_expected[5] = 1'bX;
end 
// expected HEX2[ 4 ]
initial
begin
	HEX2_expected[4] = 1'bX;
end 
// expected HEX2[ 3 ]
initial
begin
	HEX2_expected[3] = 1'bX;
end 
// expected HEX2[ 2 ]
initial
begin
	HEX2_expected[2] = 1'bX;
end 
// expected HEX2[ 1 ]
initial
begin
	HEX2_expected[1] = 1'bX;
end 
// expected HEX2[ 0 ]
initial
begin
	HEX2_expected[0] = 1'bX;
end 
// expected HEX3[ 6 ]
initial
begin
	HEX3_expected[6] = 1'bX;
end 
// expected HEX3[ 5 ]
initial
begin
	HEX3_expected[5] = 1'bX;
end 
// expected HEX3[ 4 ]
initial
begin
	HEX3_expected[4] = 1'bX;
end 
// expected HEX3[ 3 ]
initial
begin
	HEX3_expected[3] = 1'bX;
end 
// expected HEX3[ 2 ]
initial
begin
	HEX3_expected[2] = 1'bX;
end 
// expected HEX3[ 1 ]
initial
begin
	HEX3_expected[1] = 1'bX;
end 
// expected HEX3[ 0 ]
initial
begin
	HEX3_expected[0] = 1'bX;
end 
// expected HEX4[ 6 ]
initial
begin
	HEX4_expected[6] = 1'bX;
end 
// expected HEX4[ 5 ]
initial
begin
	HEX4_expected[5] = 1'bX;
end 
// expected HEX4[ 4 ]
initial
begin
	HEX4_expected[4] = 1'bX;
end 
// expected HEX4[ 3 ]
initial
begin
	HEX4_expected[3] = 1'bX;
end 
// expected HEX4[ 2 ]
initial
begin
	HEX4_expected[2] = 1'bX;
end 
// expected HEX4[ 1 ]
initial
begin
	HEX4_expected[1] = 1'bX;
end 
// expected HEX4[ 0 ]
initial
begin
	HEX4_expected[0] = 1'bX;
end 
// expected HEX5[ 6 ]
initial
begin
	HEX5_expected[6] = 1'bX;
end 
// expected HEX5[ 5 ]
initial
begin
	HEX5_expected[5] = 1'bX;
end 
// expected HEX5[ 4 ]
initial
begin
	HEX5_expected[4] = 1'bX;
end 
// expected HEX5[ 3 ]
initial
begin
	HEX5_expected[3] = 1'bX;
end 
// expected HEX5[ 2 ]
initial
begin
	HEX5_expected[2] = 1'bX;
end 
// expected HEX5[ 1 ]
initial
begin
	HEX5_expected[1] = 1'bX;
end 
// expected HEX5[ 0 ]
initial
begin
	HEX5_expected[0] = 1'bX;
end 
// expected HEX6[ 6 ]
initial
begin
	HEX6_expected[6] = 1'bX;
end 
// expected HEX6[ 5 ]
initial
begin
	HEX6_expected[5] = 1'bX;
end 
// expected HEX6[ 4 ]
initial
begin
	HEX6_expected[4] = 1'bX;
end 
// expected HEX6[ 3 ]
initial
begin
	HEX6_expected[3] = 1'bX;
end 
// expected HEX6[ 2 ]
initial
begin
	HEX6_expected[2] = 1'bX;
end 
// expected HEX6[ 1 ]
initial
begin
	HEX6_expected[1] = 1'bX;
end 
// expected HEX6[ 0 ]
initial
begin
	HEX6_expected[0] = 1'bX;
end 
// expected HEX7[ 6 ]
initial
begin
	HEX7_expected[6] = 1'bX;
end 
// expected HEX7[ 5 ]
initial
begin
	HEX7_expected[5] = 1'bX;
end 
// expected HEX7[ 4 ]
initial
begin
	HEX7_expected[4] = 1'bX;
end 
// expected HEX7[ 3 ]
initial
begin
	HEX7_expected[3] = 1'bX;
end 
// expected HEX7[ 2 ]
initial
begin
	HEX7_expected[2] = 1'bX;
end 
// expected HEX7[ 1 ]
initial
begin
	HEX7_expected[1] = 1'bX;
end 
// expected HEX7[ 0 ]
initial
begin
	HEX7_expected[0] = 1'bX;
end 

// expected LEDR[15]
initial
begin
	LEDR_expected[15] = 1'bX;
end 

// expected LEDR[14]
initial
begin
	LEDR_expected[14] = 1'bX;
end 

// expected LEDR[13]
initial
begin
	LEDR_expected[13] = 1'bX;
end 

// expected LEDR[12]
initial
begin
	LEDR_expected[12] = 1'bX;
end 

// expected LEDR[11]
initial
begin
	LEDR_expected[11] = 1'bX;
end 

// expected LEDR[10]
initial
begin
	LEDR_expected[10] = 1'bX;
end 

// expected LEDR[9]
initial
begin
	LEDR_expected[9] = 1'bX;
end 

// expected LEDR[8]
initial
begin
	LEDR_expected[8] = 1'bX;
end 

// expected LEDR[7]
initial
begin
	LEDR_expected[7] = 1'bX;
end 

// expected LEDR[6]
initial
begin
	LEDR_expected[6] = 1'bX;
end 

// expected LEDR[5]
initial
begin
	LEDR_expected[5] = 1'bX;
end 

// expected LEDR[4]
initial
begin
	LEDR_expected[4] = 1'bX;
end 

// expected LEDR[3]
initial
begin
	LEDR_expected[3] = 1'bX;
end 

// expected LEDR[2]
initial
begin
	LEDR_expected[2] = 1'bX;
end 

// expected LEDR[1]
initial
begin
	LEDR_expected[1] = 1'bX;
end 

// expected LEDR[0]
initial
begin
	LEDR_expected[0] = 1'bX;
end 
// generate trigger
always @(BusWires_expected or BusWires or HEX0_expected or HEX0 or HEX1_expected or HEX1 or HEX2_expected or HEX2 or HEX3_expected or HEX3 or HEX4_expected or HEX4 or HEX5_expected or HEX5 or HEX6_expected or HEX6 or HEX7_expected or HEX7 or LEDR_expected or LEDR)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected BusWires = %b | expected HEX0 = %b | expected HEX1 = %b | expected HEX2 = %b | expected HEX3 = %b | expected HEX4 = %b | expected HEX5 = %b | expected HEX6 = %b | expected HEX7 = %b | expected LEDR = %b | ",BusWires_expected_prev,HEX0_expected_prev,HEX1_expected_prev,HEX2_expected_prev,HEX3_expected_prev,HEX4_expected_prev,HEX5_expected_prev,HEX6_expected_prev,HEX7_expected_prev,LEDR_expected_prev);
	$display("| real BusWires = %b | real HEX0 = %b | real HEX1 = %b | real HEX2 = %b | real HEX3 = %b | real HEX4 = %b | real HEX5 = %b | real HEX6 = %b | real HEX7 = %b | real LEDR = %b | ",BusWires_prev,HEX0_prev,HEX1_prev,HEX2_prev,HEX3_prev,HEX4_prev,HEX5_prev,HEX6_prev,HEX7_prev,LEDR_prev);
`endif
	if (
		( BusWires_expected_prev[0] !== 1'bx ) && ( BusWires_prev[0] !== BusWires_expected_prev[0] )
		&& ((BusWires_expected_prev[0] !== last_BusWires_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[0] = BusWires_expected_prev[0];
	end
	if (
		( BusWires_expected_prev[1] !== 1'bx ) && ( BusWires_prev[1] !== BusWires_expected_prev[1] )
		&& ((BusWires_expected_prev[1] !== last_BusWires_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[1] = BusWires_expected_prev[1];
	end
	if (
		( BusWires_expected_prev[2] !== 1'bx ) && ( BusWires_prev[2] !== BusWires_expected_prev[2] )
		&& ((BusWires_expected_prev[2] !== last_BusWires_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[2] = BusWires_expected_prev[2];
	end
	if (
		( BusWires_expected_prev[3] !== 1'bx ) && ( BusWires_prev[3] !== BusWires_expected_prev[3] )
		&& ((BusWires_expected_prev[3] !== last_BusWires_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[3] = BusWires_expected_prev[3];
	end
	if (
		( BusWires_expected_prev[4] !== 1'bx ) && ( BusWires_prev[4] !== BusWires_expected_prev[4] )
		&& ((BusWires_expected_prev[4] !== last_BusWires_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[4] = BusWires_expected_prev[4];
	end
	if (
		( BusWires_expected_prev[5] !== 1'bx ) && ( BusWires_prev[5] !== BusWires_expected_prev[5] )
		&& ((BusWires_expected_prev[5] !== last_BusWires_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[5] = BusWires_expected_prev[5];
	end
	if (
		( BusWires_expected_prev[6] !== 1'bx ) && ( BusWires_prev[6] !== BusWires_expected_prev[6] )
		&& ((BusWires_expected_prev[6] !== last_BusWires_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[6] = BusWires_expected_prev[6];
	end
	if (
		( BusWires_expected_prev[7] !== 1'bx ) && ( BusWires_prev[7] !== BusWires_expected_prev[7] )
		&& ((BusWires_expected_prev[7] !== last_BusWires_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[7] = BusWires_expected_prev[7];
	end
	if (
		( BusWires_expected_prev[8] !== 1'bx ) && ( BusWires_prev[8] !== BusWires_expected_prev[8] )
		&& ((BusWires_expected_prev[8] !== last_BusWires_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[8] = BusWires_expected_prev[8];
	end
	if (
		( BusWires_expected_prev[9] !== 1'bx ) && ( BusWires_prev[9] !== BusWires_expected_prev[9] )
		&& ((BusWires_expected_prev[9] !== last_BusWires_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[9] = BusWires_expected_prev[9];
	end
	if (
		( BusWires_expected_prev[10] !== 1'bx ) && ( BusWires_prev[10] !== BusWires_expected_prev[10] )
		&& ((BusWires_expected_prev[10] !== last_BusWires_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[10] = BusWires_expected_prev[10];
	end
	if (
		( BusWires_expected_prev[11] !== 1'bx ) && ( BusWires_prev[11] !== BusWires_expected_prev[11] )
		&& ((BusWires_expected_prev[11] !== last_BusWires_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[11] = BusWires_expected_prev[11];
	end
	if (
		( BusWires_expected_prev[12] !== 1'bx ) && ( BusWires_prev[12] !== BusWires_expected_prev[12] )
		&& ((BusWires_expected_prev[12] !== last_BusWires_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[12] = BusWires_expected_prev[12];
	end
	if (
		( BusWires_expected_prev[13] !== 1'bx ) && ( BusWires_prev[13] !== BusWires_expected_prev[13] )
		&& ((BusWires_expected_prev[13] !== last_BusWires_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[13] = BusWires_expected_prev[13];
	end
	if (
		( BusWires_expected_prev[14] !== 1'bx ) && ( BusWires_prev[14] !== BusWires_expected_prev[14] )
		&& ((BusWires_expected_prev[14] !== last_BusWires_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[14] = BusWires_expected_prev[14];
	end
	if (
		( BusWires_expected_prev[15] !== 1'bx ) && ( BusWires_prev[15] !== BusWires_expected_prev[15] )
		&& ((BusWires_expected_prev[15] !== last_BusWires_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[15] = BusWires_expected_prev[15];
	end
	if (
		( HEX0_expected_prev[0] !== 1'bx ) && ( HEX0_prev[0] !== HEX0_expected_prev[0] )
		&& ((HEX0_expected_prev[0] !== last_HEX0_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX0_exp[0] = HEX0_expected_prev[0];
	end
	if (
		( HEX0_expected_prev[1] !== 1'bx ) && ( HEX0_prev[1] !== HEX0_expected_prev[1] )
		&& ((HEX0_expected_prev[1] !== last_HEX0_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX0_exp[1] = HEX0_expected_prev[1];
	end
	if (
		( HEX0_expected_prev[2] !== 1'bx ) && ( HEX0_prev[2] !== HEX0_expected_prev[2] )
		&& ((HEX0_expected_prev[2] !== last_HEX0_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX0_exp[2] = HEX0_expected_prev[2];
	end
	if (
		( HEX0_expected_prev[3] !== 1'bx ) && ( HEX0_prev[3] !== HEX0_expected_prev[3] )
		&& ((HEX0_expected_prev[3] !== last_HEX0_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX0_exp[3] = HEX0_expected_prev[3];
	end
	if (
		( HEX0_expected_prev[4] !== 1'bx ) && ( HEX0_prev[4] !== HEX0_expected_prev[4] )
		&& ((HEX0_expected_prev[4] !== last_HEX0_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX0_exp[4] = HEX0_expected_prev[4];
	end
	if (
		( HEX0_expected_prev[5] !== 1'bx ) && ( HEX0_prev[5] !== HEX0_expected_prev[5] )
		&& ((HEX0_expected_prev[5] !== last_HEX0_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX0_exp[5] = HEX0_expected_prev[5];
	end
	if (
		( HEX0_expected_prev[6] !== 1'bx ) && ( HEX0_prev[6] !== HEX0_expected_prev[6] )
		&& ((HEX0_expected_prev[6] !== last_HEX0_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX0_exp[6] = HEX0_expected_prev[6];
	end
	if (
		( HEX1_expected_prev[0] !== 1'bx ) && ( HEX1_prev[0] !== HEX1_expected_prev[0] )
		&& ((HEX1_expected_prev[0] !== last_HEX1_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX1_exp[0] = HEX1_expected_prev[0];
	end
	if (
		( HEX1_expected_prev[1] !== 1'bx ) && ( HEX1_prev[1] !== HEX1_expected_prev[1] )
		&& ((HEX1_expected_prev[1] !== last_HEX1_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX1_exp[1] = HEX1_expected_prev[1];
	end
	if (
		( HEX1_expected_prev[2] !== 1'bx ) && ( HEX1_prev[2] !== HEX1_expected_prev[2] )
		&& ((HEX1_expected_prev[2] !== last_HEX1_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX1_exp[2] = HEX1_expected_prev[2];
	end
	if (
		( HEX1_expected_prev[3] !== 1'bx ) && ( HEX1_prev[3] !== HEX1_expected_prev[3] )
		&& ((HEX1_expected_prev[3] !== last_HEX1_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX1_exp[3] = HEX1_expected_prev[3];
	end
	if (
		( HEX1_expected_prev[4] !== 1'bx ) && ( HEX1_prev[4] !== HEX1_expected_prev[4] )
		&& ((HEX1_expected_prev[4] !== last_HEX1_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX1_exp[4] = HEX1_expected_prev[4];
	end
	if (
		( HEX1_expected_prev[5] !== 1'bx ) && ( HEX1_prev[5] !== HEX1_expected_prev[5] )
		&& ((HEX1_expected_prev[5] !== last_HEX1_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX1_exp[5] = HEX1_expected_prev[5];
	end
	if (
		( HEX1_expected_prev[6] !== 1'bx ) && ( HEX1_prev[6] !== HEX1_expected_prev[6] )
		&& ((HEX1_expected_prev[6] !== last_HEX1_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX1_exp[6] = HEX1_expected_prev[6];
	end
	if (
		( HEX2_expected_prev[0] !== 1'bx ) && ( HEX2_prev[0] !== HEX2_expected_prev[0] )
		&& ((HEX2_expected_prev[0] !== last_HEX2_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX2_exp[0] = HEX2_expected_prev[0];
	end
	if (
		( HEX2_expected_prev[1] !== 1'bx ) && ( HEX2_prev[1] !== HEX2_expected_prev[1] )
		&& ((HEX2_expected_prev[1] !== last_HEX2_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX2_exp[1] = HEX2_expected_prev[1];
	end
	if (
		( HEX2_expected_prev[2] !== 1'bx ) && ( HEX2_prev[2] !== HEX2_expected_prev[2] )
		&& ((HEX2_expected_prev[2] !== last_HEX2_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX2_exp[2] = HEX2_expected_prev[2];
	end
	if (
		( HEX2_expected_prev[3] !== 1'bx ) && ( HEX2_prev[3] !== HEX2_expected_prev[3] )
		&& ((HEX2_expected_prev[3] !== last_HEX2_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX2_exp[3] = HEX2_expected_prev[3];
	end
	if (
		( HEX2_expected_prev[4] !== 1'bx ) && ( HEX2_prev[4] !== HEX2_expected_prev[4] )
		&& ((HEX2_expected_prev[4] !== last_HEX2_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX2_exp[4] = HEX2_expected_prev[4];
	end
	if (
		( HEX2_expected_prev[5] !== 1'bx ) && ( HEX2_prev[5] !== HEX2_expected_prev[5] )
		&& ((HEX2_expected_prev[5] !== last_HEX2_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX2_exp[5] = HEX2_expected_prev[5];
	end
	if (
		( HEX2_expected_prev[6] !== 1'bx ) && ( HEX2_prev[6] !== HEX2_expected_prev[6] )
		&& ((HEX2_expected_prev[6] !== last_HEX2_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX2_exp[6] = HEX2_expected_prev[6];
	end
	if (
		( HEX3_expected_prev[0] !== 1'bx ) && ( HEX3_prev[0] !== HEX3_expected_prev[0] )
		&& ((HEX3_expected_prev[0] !== last_HEX3_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HEX3_exp[0] = HEX3_expected_prev[0];
	end
	if (
		( HEX3_expected_prev[1] !== 1'bx ) && ( HEX3_prev[1] !== HEX3_expected_prev[1] )
		&& ((HEX3_expected_prev[1] !== last_HEX3_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HEX3_exp[1] = HEX3_expected_prev[1];
	end
	if (
		( HEX3_expected_prev[2] !== 1'bx ) && ( HEX3_prev[2] !== HEX3_expected_prev[2] )
		&& ((HEX3_expected_prev[2] !== last_HEX3_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HEX3_exp[2] = HEX3_expected_prev[2];
	end
	if (
		( HEX3_expected_prev[3] !== 1'bx ) && ( HEX3_prev[3] !== HEX3_expected_prev[3] )
		&& ((HEX3_expected_prev[3] !== last_HEX3_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HEX3_exp[3] = HEX3_expected_prev[3];
	end
	if (
		( HEX3_expected_prev[4] !== 1'bx ) && ( HEX3_prev[4] !== HEX3_expected_prev[4] )
		&& ((HEX3_expected_prev[4] !== last_HEX3_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HEX3_exp[4] = HEX3_expected_prev[4];
	end
	if (
		( HEX3_expected_prev[5] !== 1'bx ) && ( HEX3_prev[5] !== HEX3_expected_prev[5] )
		&& ((HEX3_expected_prev[5] !== last_HEX3_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HEX3_exp[5] = HEX3_expected_prev[5];
	end
	if (
		( HEX3_expected_prev[6] !== 1'bx ) && ( HEX3_prev[6] !== HEX3_expected_prev[6] )
		&& ((HEX3_expected_prev[6] !== last_HEX3_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HEX3_exp[6] = HEX3_expected_prev[6];
	end
	if (
		( HEX4_expected_prev[0] !== 1'bx ) && ( HEX4_prev[0] !== HEX4_expected_prev[0] )
		&& ((HEX4_expected_prev[0] !== last_HEX4_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HEX4_exp[0] = HEX4_expected_prev[0];
	end
	if (
		( HEX4_expected_prev[1] !== 1'bx ) && ( HEX4_prev[1] !== HEX4_expected_prev[1] )
		&& ((HEX4_expected_prev[1] !== last_HEX4_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HEX4_exp[1] = HEX4_expected_prev[1];
	end
	if (
		( HEX4_expected_prev[2] !== 1'bx ) && ( HEX4_prev[2] !== HEX4_expected_prev[2] )
		&& ((HEX4_expected_prev[2] !== last_HEX4_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HEX4_exp[2] = HEX4_expected_prev[2];
	end
	if (
		( HEX4_expected_prev[3] !== 1'bx ) && ( HEX4_prev[3] !== HEX4_expected_prev[3] )
		&& ((HEX4_expected_prev[3] !== last_HEX4_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HEX4_exp[3] = HEX4_expected_prev[3];
	end
	if (
		( HEX4_expected_prev[4] !== 1'bx ) && ( HEX4_prev[4] !== HEX4_expected_prev[4] )
		&& ((HEX4_expected_prev[4] !== last_HEX4_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HEX4_exp[4] = HEX4_expected_prev[4];
	end
	if (
		( HEX4_expected_prev[5] !== 1'bx ) && ( HEX4_prev[5] !== HEX4_expected_prev[5] )
		&& ((HEX4_expected_prev[5] !== last_HEX4_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HEX4_exp[5] = HEX4_expected_prev[5];
	end
	if (
		( HEX4_expected_prev[6] !== 1'bx ) && ( HEX4_prev[6] !== HEX4_expected_prev[6] )
		&& ((HEX4_expected_prev[6] !== last_HEX4_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HEX4_exp[6] = HEX4_expected_prev[6];
	end
	if (
		( HEX5_expected_prev[0] !== 1'bx ) && ( HEX5_prev[0] !== HEX5_expected_prev[0] )
		&& ((HEX5_expected_prev[0] !== last_HEX5_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX5_expected_prev);
		$display ("     Real value = %b", HEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_HEX5_exp[0] = HEX5_expected_prev[0];
	end
	if (
		( HEX5_expected_prev[1] !== 1'bx ) && ( HEX5_prev[1] !== HEX5_expected_prev[1] )
		&& ((HEX5_expected_prev[1] !== last_HEX5_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX5_expected_prev);
		$display ("     Real value = %b", HEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_HEX5_exp[1] = HEX5_expected_prev[1];
	end
	if (
		( HEX5_expected_prev[2] !== 1'bx ) && ( HEX5_prev[2] !== HEX5_expected_prev[2] )
		&& ((HEX5_expected_prev[2] !== last_HEX5_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX5_expected_prev);
		$display ("     Real value = %b", HEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_HEX5_exp[2] = HEX5_expected_prev[2];
	end
	if (
		( HEX5_expected_prev[3] !== 1'bx ) && ( HEX5_prev[3] !== HEX5_expected_prev[3] )
		&& ((HEX5_expected_prev[3] !== last_HEX5_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX5_expected_prev);
		$display ("     Real value = %b", HEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_HEX5_exp[3] = HEX5_expected_prev[3];
	end
	if (
		( HEX5_expected_prev[4] !== 1'bx ) && ( HEX5_prev[4] !== HEX5_expected_prev[4] )
		&& ((HEX5_expected_prev[4] !== last_HEX5_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX5_expected_prev);
		$display ("     Real value = %b", HEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_HEX5_exp[4] = HEX5_expected_prev[4];
	end
	if (
		( HEX5_expected_prev[5] !== 1'bx ) && ( HEX5_prev[5] !== HEX5_expected_prev[5] )
		&& ((HEX5_expected_prev[5] !== last_HEX5_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX5_expected_prev);
		$display ("     Real value = %b", HEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_HEX5_exp[5] = HEX5_expected_prev[5];
	end
	if (
		( HEX5_expected_prev[6] !== 1'bx ) && ( HEX5_prev[6] !== HEX5_expected_prev[6] )
		&& ((HEX5_expected_prev[6] !== last_HEX5_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX5_expected_prev);
		$display ("     Real value = %b", HEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_HEX5_exp[6] = HEX5_expected_prev[6];
	end
	if (
		( HEX6_expected_prev[0] !== 1'bx ) && ( HEX6_prev[0] !== HEX6_expected_prev[0] )
		&& ((HEX6_expected_prev[0] !== last_HEX6_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX6_expected_prev);
		$display ("     Real value = %b", HEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_HEX6_exp[0] = HEX6_expected_prev[0];
	end
	if (
		( HEX6_expected_prev[1] !== 1'bx ) && ( HEX6_prev[1] !== HEX6_expected_prev[1] )
		&& ((HEX6_expected_prev[1] !== last_HEX6_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX6_expected_prev);
		$display ("     Real value = %b", HEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_HEX6_exp[1] = HEX6_expected_prev[1];
	end
	if (
		( HEX6_expected_prev[2] !== 1'bx ) && ( HEX6_prev[2] !== HEX6_expected_prev[2] )
		&& ((HEX6_expected_prev[2] !== last_HEX6_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX6_expected_prev);
		$display ("     Real value = %b", HEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_HEX6_exp[2] = HEX6_expected_prev[2];
	end
	if (
		( HEX6_expected_prev[3] !== 1'bx ) && ( HEX6_prev[3] !== HEX6_expected_prev[3] )
		&& ((HEX6_expected_prev[3] !== last_HEX6_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX6_expected_prev);
		$display ("     Real value = %b", HEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_HEX6_exp[3] = HEX6_expected_prev[3];
	end
	if (
		( HEX6_expected_prev[4] !== 1'bx ) && ( HEX6_prev[4] !== HEX6_expected_prev[4] )
		&& ((HEX6_expected_prev[4] !== last_HEX6_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX6[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX6_expected_prev);
		$display ("     Real value = %b", HEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_HEX6_exp[4] = HEX6_expected_prev[4];
	end
	if (
		( HEX6_expected_prev[5] !== 1'bx ) && ( HEX6_prev[5] !== HEX6_expected_prev[5] )
		&& ((HEX6_expected_prev[5] !== last_HEX6_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX6[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX6_expected_prev);
		$display ("     Real value = %b", HEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_HEX6_exp[5] = HEX6_expected_prev[5];
	end
	if (
		( HEX6_expected_prev[6] !== 1'bx ) && ( HEX6_prev[6] !== HEX6_expected_prev[6] )
		&& ((HEX6_expected_prev[6] !== last_HEX6_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX6[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX6_expected_prev);
		$display ("     Real value = %b", HEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_HEX6_exp[6] = HEX6_expected_prev[6];
	end
	if (
		( HEX7_expected_prev[0] !== 1'bx ) && ( HEX7_prev[0] !== HEX7_expected_prev[0] )
		&& ((HEX7_expected_prev[0] !== last_HEX7_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX7_expected_prev);
		$display ("     Real value = %b", HEX7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_HEX7_exp[0] = HEX7_expected_prev[0];
	end
	if (
		( HEX7_expected_prev[1] !== 1'bx ) && ( HEX7_prev[1] !== HEX7_expected_prev[1] )
		&& ((HEX7_expected_prev[1] !== last_HEX7_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX7_expected_prev);
		$display ("     Real value = %b", HEX7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_HEX7_exp[1] = HEX7_expected_prev[1];
	end
	if (
		( HEX7_expected_prev[2] !== 1'bx ) && ( HEX7_prev[2] !== HEX7_expected_prev[2] )
		&& ((HEX7_expected_prev[2] !== last_HEX7_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX7_expected_prev);
		$display ("     Real value = %b", HEX7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_HEX7_exp[2] = HEX7_expected_prev[2];
	end
	if (
		( HEX7_expected_prev[3] !== 1'bx ) && ( HEX7_prev[3] !== HEX7_expected_prev[3] )
		&& ((HEX7_expected_prev[3] !== last_HEX7_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX7_expected_prev);
		$display ("     Real value = %b", HEX7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_HEX7_exp[3] = HEX7_expected_prev[3];
	end
	if (
		( HEX7_expected_prev[4] !== 1'bx ) && ( HEX7_prev[4] !== HEX7_expected_prev[4] )
		&& ((HEX7_expected_prev[4] !== last_HEX7_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX7[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX7_expected_prev);
		$display ("     Real value = %b", HEX7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_HEX7_exp[4] = HEX7_expected_prev[4];
	end
	if (
		( HEX7_expected_prev[5] !== 1'bx ) && ( HEX7_prev[5] !== HEX7_expected_prev[5] )
		&& ((HEX7_expected_prev[5] !== last_HEX7_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX7[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX7_expected_prev);
		$display ("     Real value = %b", HEX7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_HEX7_exp[5] = HEX7_expected_prev[5];
	end
	if (
		( HEX7_expected_prev[6] !== 1'bx ) && ( HEX7_prev[6] !== HEX7_expected_prev[6] )
		&& ((HEX7_expected_prev[6] !== last_HEX7_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX7[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX7_expected_prev);
		$display ("     Real value = %b", HEX7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_HEX7_exp[6] = HEX7_expected_prev[6];
	end
	if (
		( LEDR_expected_prev[0] !== 1'bx ) && ( LEDR_prev[0] !== LEDR_expected_prev[0] )
		&& ((LEDR_expected_prev[0] !== last_LEDR_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDR_exp[0] = LEDR_expected_prev[0];
	end
	if (
		( LEDR_expected_prev[1] !== 1'bx ) && ( LEDR_prev[1] !== LEDR_expected_prev[1] )
		&& ((LEDR_expected_prev[1] !== last_LEDR_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDR_exp[1] = LEDR_expected_prev[1];
	end
	if (
		( LEDR_expected_prev[2] !== 1'bx ) && ( LEDR_prev[2] !== LEDR_expected_prev[2] )
		&& ((LEDR_expected_prev[2] !== last_LEDR_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDR_exp[2] = LEDR_expected_prev[2];
	end
	if (
		( LEDR_expected_prev[3] !== 1'bx ) && ( LEDR_prev[3] !== LEDR_expected_prev[3] )
		&& ((LEDR_expected_prev[3] !== last_LEDR_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDR_exp[3] = LEDR_expected_prev[3];
	end
	if (
		( LEDR_expected_prev[4] !== 1'bx ) && ( LEDR_prev[4] !== LEDR_expected_prev[4] )
		&& ((LEDR_expected_prev[4] !== last_LEDR_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDR_exp[4] = LEDR_expected_prev[4];
	end
	if (
		( LEDR_expected_prev[5] !== 1'bx ) && ( LEDR_prev[5] !== LEDR_expected_prev[5] )
		&& ((LEDR_expected_prev[5] !== last_LEDR_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDR_exp[5] = LEDR_expected_prev[5];
	end
	if (
		( LEDR_expected_prev[6] !== 1'bx ) && ( LEDR_prev[6] !== LEDR_expected_prev[6] )
		&& ((LEDR_expected_prev[6] !== last_LEDR_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDR_exp[6] = LEDR_expected_prev[6];
	end
	if (
		( LEDR_expected_prev[7] !== 1'bx ) && ( LEDR_prev[7] !== LEDR_expected_prev[7] )
		&& ((LEDR_expected_prev[7] !== last_LEDR_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDR_exp[7] = LEDR_expected_prev[7];
	end
	if (
		( LEDR_expected_prev[8] !== 1'bx ) && ( LEDR_prev[8] !== LEDR_expected_prev[8] )
		&& ((LEDR_expected_prev[8] !== last_LEDR_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDR_exp[8] = LEDR_expected_prev[8];
	end
	if (
		( LEDR_expected_prev[9] !== 1'bx ) && ( LEDR_prev[9] !== LEDR_expected_prev[9] )
		&& ((LEDR_expected_prev[9] !== last_LEDR_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDR_exp[9] = LEDR_expected_prev[9];
	end
	if (
		( LEDR_expected_prev[10] !== 1'bx ) && ( LEDR_prev[10] !== LEDR_expected_prev[10] )
		&& ((LEDR_expected_prev[10] !== last_LEDR_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDR_exp[10] = LEDR_expected_prev[10];
	end
	if (
		( LEDR_expected_prev[11] !== 1'bx ) && ( LEDR_prev[11] !== LEDR_expected_prev[11] )
		&& ((LEDR_expected_prev[11] !== last_LEDR_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDR_exp[11] = LEDR_expected_prev[11];
	end
	if (
		( LEDR_expected_prev[12] !== 1'bx ) && ( LEDR_prev[12] !== LEDR_expected_prev[12] )
		&& ((LEDR_expected_prev[12] !== last_LEDR_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDR_exp[12] = LEDR_expected_prev[12];
	end
	if (
		( LEDR_expected_prev[13] !== 1'bx ) && ( LEDR_prev[13] !== LEDR_expected_prev[13] )
		&& ((LEDR_expected_prev[13] !== last_LEDR_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDR_exp[13] = LEDR_expected_prev[13];
	end
	if (
		( LEDR_expected_prev[14] !== 1'bx ) && ( LEDR_prev[14] !== LEDR_expected_prev[14] )
		&& ((LEDR_expected_prev[14] !== last_LEDR_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDR_exp[14] = LEDR_expected_prev[14];
	end
	if (
		( LEDR_expected_prev[15] !== 1'bx ) && ( LEDR_prev[15] !== LEDR_expected_prev[15] )
		&& ((LEDR_expected_prev[15] !== last_LEDR_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDR_exp[15] = LEDR_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module proc_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] treg_BusWires;
reg KEY0;
reg KEY1;
reg KEY2;
reg KEY3;
reg [17:0] SW;
// wires                                               
wire [15:0] BusWires;
wire [6:0] HEX0;
wire [6:0] HEX1;
wire [6:0] HEX2;
wire [6:0] HEX3;
wire [6:0] HEX4;
wire [6:0] HEX5;
wire [6:0] HEX6;
wire [6:0] HEX7;
wire [15:0] LEDR;

wire sampler;                             

// assign statements (if any)                          
assign BusWires = treg_BusWires;
proc i1 (
// port map - connection between master ports and signals/registers   
	.BusWires(BusWires),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.HEX6(HEX6),
	.HEX7(HEX7),
	.KEY0(KEY0),
	.KEY1(KEY1),
	.KEY2(KEY2),
	.KEY3(KEY3),
	.LEDR(LEDR),
	.SW(SW)
);
// BusWires[ 15 ]
initial
begin
	treg_BusWires[15] = 1'bZ;
end 
// BusWires[ 14 ]
initial
begin
	treg_BusWires[14] = 1'bZ;
end 
// BusWires[ 13 ]
initial
begin
	treg_BusWires[13] = 1'bZ;
end 
// BusWires[ 12 ]
initial
begin
	treg_BusWires[12] = 1'bZ;
end 
// BusWires[ 11 ]
initial
begin
	treg_BusWires[11] = 1'bZ;
end 
// BusWires[ 10 ]
initial
begin
	treg_BusWires[10] = 1'bZ;
end 
// BusWires[ 9 ]
initial
begin
	treg_BusWires[9] = 1'bZ;
end 
// BusWires[ 8 ]
initial
begin
	treg_BusWires[8] = 1'bZ;
end 
// BusWires[ 7 ]
initial
begin
	treg_BusWires[7] = 1'bZ;
end 
// BusWires[ 6 ]
initial
begin
	treg_BusWires[6] = 1'bZ;
end 
// BusWires[ 5 ]
initial
begin
	treg_BusWires[5] = 1'bZ;
end 
// BusWires[ 4 ]
initial
begin
	treg_BusWires[4] = 1'bZ;
end 
// BusWires[ 3 ]
initial
begin
	treg_BusWires[3] = 1'bZ;
end 
// BusWires[ 2 ]
initial
begin
	treg_BusWires[2] = 1'bZ;
end 
// BusWires[ 1 ]
initial
begin
	treg_BusWires[1] = 1'bZ;
end 
// BusWires[ 0 ]
initial
begin
	treg_BusWires[0] = 1'bZ;
end 

// KEY0
always
begin
	KEY0 = 1'b0;
	KEY0 = #20000 1'b1;
	#20000;
end 

// KEY1
initial
begin
	KEY1 = 1'b0;
end 

// KEY2
initial
begin
	KEY2 = 1'b0;
end 

// KEY3
initial
begin
	KEY3 = 1'b0;
end 
// SW[ 17 ]
initial
begin
	SW[17] = 1'b0;
end 
// SW[ 16 ]
initial
begin
	SW[16] = 1'b1;
end 
// SW[ 15 ]
initial
begin
	SW[15] = 1'b0;
end 
// SW[ 14 ]
initial
begin
	SW[14] = 1'b0;
end 
// SW[ 13 ]
initial
begin
	SW[13] = 1'b0;
end 
// SW[ 12 ]
initial
begin
	SW[12] = 1'b0;
end 
// SW[ 11 ]
initial
begin
	SW[11] = 1'b0;
end 
// SW[ 10 ]
initial
begin
	SW[10] = 1'b0;
end 
// SW[ 9 ]
initial
begin
	SW[9] = 1'b0;
end 
// SW[ 8 ]
initial
begin
	SW[8] = 1'b0;
end 
// SW[ 7 ]
initial
begin
	SW[7] = 1'b0;
end 
// SW[ 6 ]
initial
begin
	SW[6] = 1'b0;
end 
// SW[ 5 ]
initial
begin
	SW[5] = 1'b0;
end 
// SW[ 4 ]
initial
begin
	SW[4] = 1'b0;
end 
// SW[ 3 ]
initial
begin
	SW[3] = 1'b0;
end 
// SW[ 2 ]
initial
begin
	SW[2] = 1'b0;
end 
// SW[ 1 ]
initial
begin
	SW[1] = 1'b0;
end 
// SW[ 0 ]
initial
begin
	SW[0] = 1'b0;
end 

proc_vlg_sample_tst tb_sample (
	.BusWires(BusWires),
	.KEY0(KEY0),
	.KEY1(KEY1),
	.KEY2(KEY2),
	.KEY3(KEY3),
	.SW(SW),
	.sampler_tx(sampler)
);

proc_vlg_check_tst tb_out(
	.BusWires(BusWires),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.HEX6(HEX6),
	.HEX7(HEX7),
	.LEDR(LEDR),
	.sampler_rx(sampler)
);
endmodule

